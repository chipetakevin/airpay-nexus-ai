
import React from 'react';
import { Button } from '@/components/ui/button';
import { Download, Mail, MessageCircle } from 'lucide-react';
import { Transaction } from './types/admin';
import { useToast } from '@/hooks/use-toast';
import jsPDF from 'jspdf';

interface StatementActionsProps {
  transaction?: Transaction;
}

export const StatementActions = ({ transaction }: StatementActionsProps) => {
  const { toast } = useToast();

  const generateTransactionPDF = (tx: Transaction) => {
    const doc = new jsPDF();
    
    // Add logo representation
    doc.setFillColor(79, 70, 229);
    doc.roundedRect(20, 15, 40, 12, 3, 3, 'F');
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('DM', 32, 24);
    
    // Reset colors and add header
    doc.setTextColor(0, 0, 0);
    doc.setFontSize(20);
    doc.text('Transaction Receipt', 70, 25);
    
    // Transaction details
    doc.setFontSize(12);
    const transactionId = `AP${tx.timestamp?.replace(/[^0-9]/g, '').slice(-8) || 'N/A'}`;
    doc.text(`Transaction ID: ${transactionId}`, 20, 50);
    doc.text(`Date: ${tx.timestamp ? new Date(tx.timestamp).toLocaleDateString('en-ZA') : 'N/A'}`, 20, 65);
    doc.text(`Network: ${tx.network || 'N/A'}`, 20, 80);
    doc.text(`Amount: R${tx.amount?.toFixed(2) || '0.00'}`, 20, 95);
    doc.text(`Recipient: ${tx.recipientName || tx.recipient_name || 'N/A'}`, 20, 110);
    doc.text(`Status: ${tx.status || 'N/A'}`, 20, 125);
    doc.text(`Cashback Earned: R${(tx.cashbackEarned || tx.cashback_earned || 0).toFixed(2)}`, 20, 140);
    
    // Footer
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by OneCard Platform', 20, 280);
    
    return doc;
  };

  const handlePDFDownload = () => {
    if (!transaction) {
      toast({
        title: "Error",
        description: "No transaction data available for PDF generation",
        variant: "destructive"
      });
      return;
    }

    try {
      const doc = generateTransactionPDF(transaction);
      const transactionId = `AP${transaction.timestamp?.replace(/[^0-9]/g, '').slice(-8) || 'N/A'}`;
      doc.save(`OneCard_Receipt_${transactionId}.pdf`);
      
      toast({
        title: "PDF Downloaded",
        description: `Transaction receipt ${transactionId} has been downloaded`,
        duration: 3000,
      });
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast({
        title: "PDF Generation Failed",
        description: "There was an error generating the PDF. Please try again.",
        variant: "destructive"
      });
    }
  };

  const handleEmailSend = () => {
    if (!transaction) {
      toast({
        title: "Error", 
        description: "No transaction data available for email",
        variant: "destructive"
      });
      return;
    }

    try {
      // Get customer email from stored credentials
      const credentials = localStorage.getItem('userCredentials');
      let customerEmail = '';
      
      if (credentials) {
        const parsedCredentials = JSON.parse(credentials);
        customerEmail = parsedCredentials.email || '';
      }

      if (!customerEmail) {
        toast({
          title: "Email Not Available",
          description: "No email address found. Please ensure you're logged in.",
          variant: "destructive"
        });
        return;
      }

      // Generate email content
      const transactionId = `AP${transaction.timestamp?.replace(/[^0-9]/g, '').slice(-8) || 'N/A'}`;
      const emailSubject = `OneCard Transaction Receipt - ${transactionId}`;
      const emailBody = `
Dear Customer,

Thank you for using OneCard! Here are your transaction details:

Transaction ID: ${transactionId}
Date: ${transaction.timestamp ? new Date(transaction.timestamp).toLocaleDateString('en-ZA') : 'N/A'}
Network: ${transaction.network || 'N/A'}
Amount: R${transaction.amount?.toFixed(2) || '0.00'}
Recipient: ${transaction.recipientName || transaction.recipient_name || 'N/A'}
Status: ${transaction.status || 'N/A'}
Cashback Earned: R${(transaction.cashbackEarned || transaction.cashback_earned || 0).toFixed(2)}

Best regards,
OneCard Team
      `.trim();

      // Create mailto link
      const mailtoLink = `mailto:${customerEmail}?subject=${encodeURIComponent(emailSubject)}&body=${encodeURIComponent(emailBody)}`;
      window.open(mailtoLink, '_blank');

      toast({
        title: "Email Opened",
        description: `Email client opened with receipt for ${transactionId}`,
        duration: 3000,
      });
    } catch (error) {
      console.error('Error preparing email:', error);
      toast({
        title: "Email Error",
        description: "There was an error preparing the email. Please try again.",
        variant: "destructive"
      });
    }
  };

  const handleWhatsAppSend = () => {
    if (!transaction) {
      toast({
        title: "Error",
        description: "No transaction data available for WhatsApp",
        variant: "destructive"
      });
      return;
    }

    try {
      // Format transaction details for WhatsApp
      const message = encodeURIComponent(
        `🧾 Transaction Receipt\n\n` +
        `📱 Transaction ID: AP${transaction.timestamp?.replace(/[^0-9]/g, '').slice(-8) || 'N/A'}\n` +
        `🌐 Network: ${transaction.network || 'N/A'}\n` +
        `💰 Amount: R${transaction.amount?.toFixed(2) || '0.00'}\n` +
        `👤 Recipient: ${transaction.recipientName || transaction.recipient_name || 'N/A'}\n` +
        `💚 Cashback: R${(transaction.cashbackEarned || transaction.cashback_earned || 0).toFixed(2)}\n` +
        `📅 Date: ${transaction.timestamp ? new Date(transaction.timestamp).toLocaleDateString('en-ZA') : 'N/A'}\n` +
        `✅ Status: ${transaction.status || 'N/A'}\n\n` +
        `Thank you for using OneCard! 🙏`
      );
      
      // Use a default WhatsApp number for demo purposes
      const phoneNumber = '27832466539';
      const whatsappUrl = `https://wa.me/${phoneNumber}?text=${message}`;
      window.open(whatsappUrl, '_blank');

      toast({
        title: "WhatsApp Opened",
        description: "WhatsApp opened with transaction receipt",
        duration: 3000,
      });
    } catch (error) {
      console.error('Error preparing WhatsApp message:', error);
      toast({
        title: "WhatsApp Error",
        description: "There was an error preparing the WhatsApp message. Please try again.",
        variant: "destructive"
      });
    }
  };

  return (
    <div className="flex gap-1 w-full max-w-[200px]">
      <Button 
        size="sm" 
        variant="outline" 
        onClick={handlePDFDownload}
        className="flex-1 text-xs px-2 py-1 h-8 min-w-0"
      >
        <Download className="w-3 h-3 mr-1 flex-shrink-0" />
        <span className="truncate">PDF</span>
      </Button>
      <Button 
        size="sm" 
        variant="outline" 
        onClick={handleEmailSend}
        className="flex-1 text-xs px-2 py-1 h-8 min-w-0"
      >
        <Mail className="w-3 h-3 mr-1 flex-shrink-0" />
        <span className="truncate">Email</span>
      </Button>
      <Button 
        size="sm" 
        variant="outline" 
        onClick={handleWhatsAppSend}
        className="flex-1 text-xs px-2 py-1 h-8 min-w-0 bg-green-50 hover:bg-green-100 text-green-700 border-green-200"
      >
        <MessageCircle className="w-3 h-3 mr-1 flex-shrink-0" />
        <span className="truncate">WhatsApp</span>
      </Button>
    </div>
  );
};
